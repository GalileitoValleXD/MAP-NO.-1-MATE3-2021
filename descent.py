{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "descent.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/GalileitoValleXD/MAP-NO.-1-MATE3-2021/blob/main/descent.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Gfd0HVWi93W_"
      },
      "source": [
        "from sympy import *\n",
        "\n",
        "x = Symbol('x')\n",
        "y = Symbol('y')\n",
        "z = Symbol('z')\n",
        "\n",
        "f = sin(x*y) + 16*x**2 + 25*y**2\n",
        "f2 = 100*((y - x**2))**2 + (1-x)**2\n",
        "\n",
        "print(\"------------------------------------------------\")\n",
        "print(\"1.) \" + str(f))\n",
        "print(\"2.) \" + str(f2))\n",
        "opcion1= int(input(print(\"ELIJA FUNCION QUE DESEA: \")))\n",
        "print(\"------------------------------------------------\")\n",
        "\n",
        "\n",
        "if opcion1 == 1:\n",
        "  f = sin(x*y) + 16*x**2 + 25*y**2\n",
        "\n",
        "else:\n",
        "  f =  100*((y - x**2))**2 + (1-x)**2\n",
        "\n",
        "print(\"1.) Step-size constante\" )\n",
        "print(\"2.) Step-size variable\")\n",
        "opcion2 = int(input(print(\"ELIJA EL TIPO DE ALPHA: \")))\n",
        "\n",
        "# derivada dx\n",
        "fpx = f.diff(x)\n",
        "\n",
        "# derivada dy\n",
        "fpy = f.diff(y)\n",
        "\n",
        "# gradiente\n",
        "grad = [fpx,fpy]\n",
        "\n",
        "if opcion2== 1:\n",
        "  opcion3 = input(print(\"ELIJA EL VALOR DE ALPHA\"))\n",
        "  alpha = float(opcion3)\n",
        "  evaluarx = lambda x,y: fpx\n",
        "  evaluary = lambda x,y: fpy\n",
        "  ejex = 1.15\n",
        "  ejey = 1.15\n",
        "  #alpha = 0.001\n",
        "  iterations = 0\n",
        "  precision = 0.000000001\n",
        "  tabla = True\n",
        "  maxIterations = 1000\n",
        "\n",
        "  def direccion(enx, eny):\n",
        "    resultado = \"[\" + str(enx) + \",\" + str(eny) + \"]\"\n",
        "    return resultado\n",
        "\n",
        "  def norma(i, j):\n",
        "    resultado = sqrt(i**2 + j**2)\n",
        "    return resultado\n",
        "\n",
        "  print(\"Iteracion /                    (X1,X2)                    /                             Direccion                          /       Norma \")\n",
        "  while (norma(ejex, ejey) > precision):\n",
        "      global1 = ejex\n",
        "      global2 = ejey\n",
        "      ajuste = ejex- alpha*N(fpx.subs(x,ejex).subs(y,ejey)).evalf()\n",
        "      ajuste2 = ejey - alpha*N(fpy.subs(y, ejey)).subs(x,ejex).evalf()\n",
        "\n",
        "      iterations += 1\n",
        "      if iterations > maxIterations:\n",
        "          print(\"LIMTE DE ITERACION ALCANZADA\")\n",
        "          tabla = False\n",
        "          break\n",
        "\n",
        "      \n",
        "      if abs(ajuste-ejex) < precision and abs(ajuste2-ejey) < precision:\n",
        "          break\n",
        "      \n",
        "      ejex = ajuste\n",
        "      ejey = ajuste2\n",
        "\n",
        "      print(\"-----------------------------------------------------------------------------------------------------------------------------------------------------------------\")\n",
        "      if(norma(ajuste, ajuste2)) > (10e+250):\n",
        "        print(\"Iteracion /                    (X1,X2)                    /                             Direccion                          /       Norma \")\n",
        "        print( str(iterations) + \"              (\" + str(global1) + \",\" + str(global2) + \")                                  \" + direccion(ajuste, ajuste2) + \"            \" + \"Infinito\" )\n",
        "        break;\n",
        "    \n",
        "    \n",
        "      else: \n",
        "        print(\"Iteracion /                    (X1,X2)                    /                             Direccion                          /       Norma \")\n",
        "        print( str(iterations) + \"              (\" + str(global1) + \",\" + str(global2) + \")                                  \" + direccion(ajuste, ajuste2) + \"            \" + str(norma(ajuste, ajuste2)) )\n",
        "  if tabla:\n",
        "    print(\"Funcion: \"+ str(f))\n",
        "    print(\"Cantidad de iteraciones:\",iterations,sep=\" \")\n",
        "    print(\"Punto en X = \",ajuste,sep=\" \")\n",
        "    print(\"Punto en Y = \",ajuste2,sep=\" \")\n",
        "    print(\"Dirección: \"+ direccion(ajuste, ajuste2))\n",
        "    print(\"Norma: \"+ str(norma(ajuste, ajuste2)))\n",
        "  \n",
        "else: \n",
        "  iterations = 0\n",
        "  evaluarx = lambda x,y: fpx\n",
        "  evaluary = lambda x,y: fpy\n",
        "  ejex = 1.15\n",
        "  ejey = 1.15\n",
        "  #alpha = 0.001\n",
        "  \n",
        "  precision = 0.000000001\n",
        "  tabla = True\n",
        "  maxIterations = 1000\n",
        "\n",
        "  def direccion(enx, eny):\n",
        "    resultado = \"[\" + str(enx) + \",\" + str(eny) + \"]\"\n",
        "    return resultado\n",
        "\n",
        "  def norma(i, j):\n",
        "    resultado = sqrt(i**2 + j**2)\n",
        "    return resultado\n",
        "\n",
        "  print(\"Iteracion /                    (X1,X2)                    /                             Direccion                          /       Norma \")\n",
        "  while (norma(ejex, ejey) > precision):\n",
        "    alpha = 1/2*(iterations + 1)\n",
        "    global1 = ejex\n",
        "    global2 = ejey\n",
        "    ajuste = ejex- alpha*N(fpx.subs(x,ejex).subs(y,ejey)).evalf()\n",
        "    ajuste2 = ejey - alpha*N(fpy.subs(y, ejey)).subs(x,ejex).evalf()\n",
        "\n",
        "    iterations += 1\n",
        "    if iterations > maxIterations:\n",
        "        print(\"LIMTE DE ITERACION ALCANZADA\")\n",
        "        tabla = False\n",
        "        break\n",
        "\n",
        "    \n",
        "    if abs(ajuste-ejex) < precision and abs(ajuste2-ejey) < precision:\n",
        "        break\n",
        "    \n",
        "    ejex = ajuste\n",
        "    ejey = ajuste2\n",
        "\n",
        "    print(\"-----------------------------------------------------------------------------------------------------------------------------------------------------------------\")\n",
        "    if(norma(ajuste, ajuste2)) > (10e+250):\n",
        "      print(\"Iteracion /                    (X1,X2)                    /                             Direccion                          /       Norma \")\n",
        "      print( str(iterations) + \"              (\" + str(global1) + \",\" + str(global2) + \")                                  \" + direccion(ajuste, ajuste2) + \"            \" + \"Infinito\" )\n",
        "      break;\n",
        "    \n",
        "    \n",
        "    else:\n",
        "      print(\"Iteracion /                    (X1,X2)                    /                             Direccion                          /       Norma \")\n",
        "      print( str(iterations) + \"              (\" + str(global1) + \",\" + str(global2) + \")                                  \" + direccion(ajuste, ajuste2) + \"            \" + str(norma(ajuste, ajuste2)) )\n",
        "      \n",
        "    \n",
        "\n",
        "  if tabla:\n",
        "      print(\"Funcion: \"+ str(f))\n",
        "      print(\"Cantidad de iteraciones:\",iterations,sep=\" \")\n",
        "      print(\"Punto en X = \",ajuste,sep=\" \")\n",
        "      print(\"Punto en Y = \",ajuste2,sep=\" \")\n",
        "      print(\"Dirección: \"+ direccion(ajuste, ajuste2))\n",
        "      print(\"Norma: \"+ str(norma(ajuste, ajuste2)))\n",
        "  \n",
        "\n",
        "\n",
        "    "
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}